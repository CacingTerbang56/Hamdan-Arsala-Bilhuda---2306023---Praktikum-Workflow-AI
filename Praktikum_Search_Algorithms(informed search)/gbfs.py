# -*- coding: utf-8 -*-
"""gbfs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aP6jz7XJcteIDGd33FQ6OpTdM4IagUOm
"""

from queue import PriorityQueue
def reconstruct_path(came_from, start,goal):
    current= goal
    path = []
    while current != start :
        path.append(current)
        current = came_from[current]

    path.append(start)
    path.reverse()
    return path

def greedy_search(graph, start, goal):
    frontier = PriorityQueue()
    frontier.put((heuristic[start],start))
    came_from = {}
    explored = set ()

    while not frontier.empty():
        _, current_node = frontier.get()

        if current_node == goal:
          print("simpul tujuan ditemukan")
          path = reconstruct_path(came_from, start, goal)
          print("jalur terpendek",path )
          return path
        explored.add(current_node)

        for neighbor in graph.get(current_node, []):
            if neighbor not in explored :
                frontier.put((heuristic[neighbor], neighbor))
                came_from[neighbor] = current_node
    print("simpul tujuan tidak ditemukan")
    return None

heuristic = {
        'A': 4,
        'B': 3,
        'C': 3,
        'D': 1,
        'S': 6,
        'G': 0
    }

graph = {
        'S': ['A', 'B'],
        'A': ['B', 'D'],
        'B': ['C', 'D'],
        'C': ['D', 'G'],
        'D': ['G'],
    }


start_node = 'S'
goal_node = 'G'
greedy_search(graph, start_node, goal_node)